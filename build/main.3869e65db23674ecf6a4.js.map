{"version":3,"sources":["webpack:///./js/fetchWeather.js","webpack:///./js/createWeather.js","webpack:///./js/getGeoPosition.js","webpack:///./index.js"],"names":["fetchLocalWeather","query","reqParams","Promise","resolve","reject","fetch","baseUrl","then","response","ok","json","Error","refs","weather","document","querySelector","icon","location","temperature","humidity","wind","conditions","createWeather","classList","remove","src","current","condition","textContent","name","temp_c","wind_kph","text","options","timeout","maximumAge","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","data","fetchWeather","weatherData","error","PNotify","alert","addEventListener","event","preventDefault","submitValue","currentTarget","city","value","console","log","submitData"],"mappings":"6IAAe,SAASA,EAAkBC,GACxC,IAEMC,EAAS,0CAA6CD,EAE5D,OAAO,IAAIE,QAAQ,SAACC,EAASC,GAC3BC,MAAMC,uCAAqBL,GAC1BM,KAAK,SAAAC,GACJ,GAAGA,EAASC,GACZ,OAAOD,EAASE,OAChB,MAAM,IAAIC,QAEXJ,KAAKJ,GANN,MAOOC,mBCbLQ,EAAO,CACTC,QAASC,SAASC,cAAc,YAChCC,KAAMF,SAASC,cAAc,SAC7BE,SAAUH,SAASC,cAAc,+BACjCG,YAAaJ,SAASC,cAAc,2BACpCI,SAAUL,SAASC,cAAc,+BACjCK,KAAMN,SAASC,cAAc,2BAC7BM,WAAYP,SAASC,cAAc,kCAGpB,SAASO,EAAcT,GACtCD,EAAKC,QAAQU,UAAUC,OAAO,aAE9BZ,EAAKI,KAAKS,IAAM,SAAWZ,EAAQa,QAAQC,UAAUX,KACrDJ,EAAKK,SAASW,YAAcf,EAAQI,SAASY,KAC7CjB,EAAKM,YAAYU,YAAcf,EAAQa,QAAQI,OAAS,IACxDlB,EAAKO,SAASS,YAAcf,EAAQa,QAAQP,SAAW,IACvDP,EAAKQ,KAAKQ,YAAcf,EAAQa,QAAQK,SAAW,MACnDnB,EAAKS,WAAWO,YAAcf,EAAQa,QAAQC,UAAUK,mBCjBpDC,+CAAU,CACdC,QAAS,IACTC,WAAY,MAEP,IAAIjC,QAAQ,SAACC,EAASC,GAC3BgC,UAAUC,YAAYC,mBAAmBnC,EAASC,EAAQ6B,MCO3D1B,KAAK,SAAAU,GAAQ,OAAOA,EAASsB,OAAOC,SAAvB,KAAoCvB,EAASsB,OAAOE,YACjElC,KAAK,SAAAmC,GAAI,OAAIC,EAAaD,KAC1BnC,KAAK,SAAAqC,GAAW,OAAItB,EAAcsB,KAHrC,MAIS,SAAAC,GACLC,IAAQC,MACN,uEAOajC,SAASC,cAAc,gBAC/BiC,iBAAiB,SAE5B,SAA6BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAcF,EAAMG,cAAcC,KAAKC,MAC7CC,QAAQC,IAAIL,GAEZR,EAAaQ,GACZ5C,KAAK,SAAAkD,GAAU,OAAInC,EAAcmC,KADlC,MAEO,SAAAZ,GACLC,IAAQD,MAAM,CACZb,KAAM","file":"main.3869e65db23674ecf6a4.js","sourcesContent":["export default function fetchLocalWeather(query) {\r\n  const baseUrl = 'http://api.apixu.com/v1';\r\n  const resource = '/current.json';\r\n  const reqParams = `?key=78f1a6c1d8a84e2fa2d152923192506&q=${query}`;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch(baseUrl + resource + reqParams)  \r\n    .then(response => {\r\n      if(response.ok) \r\n      return response.json();\r\n      throw new Error()\r\n    })\r\n    .then(resolve)\r\n    .catch(reject);\r\n  });   \r\n};\r\n","const refs = {\r\n    weather: document.querySelector('.weather'),\r\n    icon: document.querySelector('.icon'),\r\n    location: document.querySelector('span[data-field=\"location\"]'),\r\n    temperature: document.querySelector('span[data-field=\"temp\"]'),\r\n    humidity: document.querySelector('span[data-field=\"humidity\"]'),\r\n    wind: document.querySelector('span[data-field=\"wind\"]'),\r\n    conditions: document.querySelector('span[data-field=\"conditions\"]')\r\n    };\r\n    \r\n    export default function createWeather(weather) {\r\n    refs.weather.classList.remove('is-hidden');\r\n\r\n    refs.icon.src = 'https:' + weather.current.condition.icon;\r\n    refs.location.textContent = weather.location.name;\r\n    refs.temperature.textContent = weather.current.temp_c + '\\\"';\r\n    refs.humidity.textContent = weather.current.humidity + '%';\r\n    refs.wind.textContent = weather.current.wind_kph + 'kph';\r\n    refs.conditions.textContent = weather.current.condition.text;\r\n    };\r\n\r\n","export default function getGeoPosition() {\r\n  const options = {\r\n    timeout: 10000,\r\n    maximumAge: 1800000,\r\n  };\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n  });\r\n};\r\n","import getGeoPosition from './js/getGeoPosition.js';\r\nimport fetchWeather from './js/fetchWeather.js';\r\nimport createWeather from './js/createWeather.js';\r\nimport './css/styles.css';\r\n\r\nimport PNotify from 'pnotify/dist/es/PNotify.js';\r\nimport PNotifyButtons from 'pnotify/dist/es/PNotifyButtons.js';\r\nimport PNotifyStyleMaterial from 'pnotify/dist/es/PNotifyStyleMaterial.js';\r\nimport 'pnotify/dist/PNotifyBrightTheme.css';\r\n\r\n\r\n// отображение погоды изпользуя геопозицию после разрешения пользователя\r\ngetGeoPosition()\r\n  .then(location => `${location.coords.latitude}+ ${location.coords.longitude}`)\r\n  .then(data => fetchWeather(data))\r\n  .then(weatherData => createWeather(weatherData))\r\n  .catch(error => {\r\n    PNotify.alert(\r\n      'Нет прав доступа к геопозиции, используйте поиск города по имени.',\r\n    );\r\n  });\r\n\r\n\r\n// запрос на отображение погоды в заданом регионе через форму поиска по имени города\r\nconst searchForm = document.querySelector('.search-form');\r\nsearchForm.addEventListener('submit', searchWeatherByName);\r\n\r\nfunction searchWeatherByName(event) {\r\n    event.preventDefault();\r\n    const submitValue = event.currentTarget.city.value;\r\n    console.log(submitValue);\r\n\r\n    fetchWeather(submitValue)\r\n    .then(submitData => createWeather(submitData))\r\n    .catch(error => {\r\n      PNotify.error({\r\n        text: \"По вашему запросу ничего не найдено! Попробуйте еще)\"\r\n      });\r\n    });\r\n}\r\n"],"sourceRoot":""}